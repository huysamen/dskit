// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/huysamen/dskit (interfaces: Repo)
//
// Generated by this command:
//
//	mockgen -destination mock/repo.go -package mock github.com/huysamen/dskit Repo
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	datastore "cloud.google.com/go/datastore"
	dskit "github.com/huysamen/dskit"
	query "github.com/huysamen/dskit/query"
	gomock "go.uber.org/mock/gomock"
)

// MockRepo is a mock of Repo interface.
type MockRepo[E any] struct {
	ctrl     *gomock.Controller
	recorder *MockRepoMockRecorder[E]
	isgomock struct{}
}

// MockRepoMockRecorder is the mock recorder for MockRepo.
type MockRepoMockRecorder[E any] struct {
	mock *MockRepo[E]
}

// NewMockRepo creates a new mock instance.
func NewMockRepo[E any](ctrl *gomock.Controller) *MockRepo[E] {
	mock := &MockRepo[E]{ctrl: ctrl}
	mock.recorder = &MockRepoMockRecorder[E]{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepo[E]) EXPECT() *MockRepoMockRecorder[E] {
	return m.recorder
}

// Client mocks base method.
func (m *MockRepo[E]) Client() dskit.Client {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Client")
	ret0, _ := ret[0].(dskit.Client)
	return ret0
}

// Client indicates an expected call of Client.
func (mr *MockRepoMockRecorder[E]) Client() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Client", reflect.TypeOf((*MockRepo[E])(nil).Client))
}

// Create mocks base method.
func (m *MockRepo[E]) Create(ctx context.Context, ancestor *datastore.Key, entity *E) (*datastore.Key, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, ancestor, entity)
	ret0, _ := ret[0].(*datastore.Key)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockRepoMockRecorder[E]) Create(ctx, ancestor, entity any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockRepo[E])(nil).Create), ctx, ancestor, entity)
}

// CreateMulti mocks base method.
func (m *MockRepo[E]) CreateMulti(ctx context.Context, ancestor *datastore.Key, entities []*E) ([]*datastore.Key, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMulti", ctx, ancestor, entities)
	ret0, _ := ret[0].([]*datastore.Key)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMulti indicates an expected call of CreateMulti.
func (mr *MockRepoMockRecorder[E]) CreateMulti(ctx, ancestor, entities any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMulti", reflect.TypeOf((*MockRepo[E])(nil).CreateMulti), ctx, ancestor, entities)
}

// CreateMultiTxn mocks base method.
func (m *MockRepo[E]) CreateMultiTxn(txn query.Transaction, ancestor *datastore.Key, entities []*E) ([]*datastore.PendingKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMultiTxn", txn, ancestor, entities)
	ret0, _ := ret[0].([]*datastore.PendingKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMultiTxn indicates an expected call of CreateMultiTxn.
func (mr *MockRepoMockRecorder[E]) CreateMultiTxn(txn, ancestor, entities any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMultiTxn", reflect.TypeOf((*MockRepo[E])(nil).CreateMultiTxn), txn, ancestor, entities)
}

// CreateMultiWithKeys mocks base method.
func (m *MockRepo[E]) CreateMultiWithKeys(ctx context.Context, keys []*datastore.Key, entities []*E) ([]*datastore.Key, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMultiWithKeys", ctx, keys, entities)
	ret0, _ := ret[0].([]*datastore.Key)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMultiWithKeys indicates an expected call of CreateMultiWithKeys.
func (mr *MockRepoMockRecorder[E]) CreateMultiWithKeys(ctx, keys, entities any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMultiWithKeys", reflect.TypeOf((*MockRepo[E])(nil).CreateMultiWithKeys), ctx, keys, entities)
}

// CreateMultiWithKeysTxn mocks base method.
func (m *MockRepo[E]) CreateMultiWithKeysTxn(txn query.Transaction, keys []*datastore.Key, entities []*E) ([]*datastore.PendingKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMultiWithKeysTxn", txn, keys, entities)
	ret0, _ := ret[0].([]*datastore.PendingKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMultiWithKeysTxn indicates an expected call of CreateMultiWithKeysTxn.
func (mr *MockRepoMockRecorder[E]) CreateMultiWithKeysTxn(txn, keys, entities any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMultiWithKeysTxn", reflect.TypeOf((*MockRepo[E])(nil).CreateMultiWithKeysTxn), txn, keys, entities)
}

// CreateTxn mocks base method.
func (m *MockRepo[E]) CreateTxn(txn query.Transaction, ancestor *datastore.Key, entity *E) (*datastore.PendingKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTxn", txn, ancestor, entity)
	ret0, _ := ret[0].(*datastore.PendingKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTxn indicates an expected call of CreateTxn.
func (mr *MockRepoMockRecorder[E]) CreateTxn(txn, ancestor, entity any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTxn", reflect.TypeOf((*MockRepo[E])(nil).CreateTxn), txn, ancestor, entity)
}

// CreateWithKey mocks base method.
func (m *MockRepo[E]) CreateWithKey(ctx context.Context, key *datastore.Key, entity *E) (*datastore.Key, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWithKey", ctx, key, entity)
	ret0, _ := ret[0].(*datastore.Key)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateWithKey indicates an expected call of CreateWithKey.
func (mr *MockRepoMockRecorder[E]) CreateWithKey(ctx, key, entity any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWithKey", reflect.TypeOf((*MockRepo[E])(nil).CreateWithKey), ctx, key, entity)
}

// CreateWithKeyTxn mocks base method.
func (m *MockRepo[E]) CreateWithKeyTxn(txn query.Transaction, key *datastore.Key, entity *E) (*datastore.PendingKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWithKeyTxn", txn, key, entity)
	ret0, _ := ret[0].(*datastore.PendingKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateWithKeyTxn indicates an expected call of CreateWithKeyTxn.
func (mr *MockRepoMockRecorder[E]) CreateWithKeyTxn(txn, key, entity any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWithKeyTxn", reflect.TypeOf((*MockRepo[E])(nil).CreateWithKeyTxn), txn, key, entity)
}

// Delete mocks base method.
func (m *MockRepo[E]) Delete(ctx context.Context, key *datastore.Key) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, key)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockRepoMockRecorder[E]) Delete(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockRepo[E])(nil).Delete), ctx, key)
}

// DeleteMulti mocks base method.
func (m *MockRepo[E]) DeleteMulti(ctx context.Context, keys []*datastore.Key) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMulti", ctx, keys)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMulti indicates an expected call of DeleteMulti.
func (mr *MockRepoMockRecorder[E]) DeleteMulti(ctx, keys any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMulti", reflect.TypeOf((*MockRepo[E])(nil).DeleteMulti), ctx, keys)
}

// DeleteMultiTxn mocks base method.
func (m *MockRepo[E]) DeleteMultiTxn(txn query.Transaction, keys []*datastore.Key) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMultiTxn", txn, keys)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMultiTxn indicates an expected call of DeleteMultiTxn.
func (mr *MockRepoMockRecorder[E]) DeleteMultiTxn(txn, keys any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMultiTxn", reflect.TypeOf((*MockRepo[E])(nil).DeleteMultiTxn), txn, keys)
}

// DeleteTxn mocks base method.
func (m *MockRepo[E]) DeleteTxn(txn query.Transaction, key *datastore.Key) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTxn", txn, key)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTxn indicates an expected call of DeleteTxn.
func (mr *MockRepoMockRecorder[E]) DeleteTxn(txn, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTxn", reflect.TypeOf((*MockRepo[E])(nil).DeleteTxn), txn, key)
}

// List mocks base method.
func (m *MockRepo[E]) List(ctx context.Context, ancestor *datastore.Key, limit int, cursor string) ([]*E, *datastore.Cursor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, ancestor, limit, cursor)
	ret0, _ := ret[0].([]*E)
	ret1, _ := ret[1].(*datastore.Cursor)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// List indicates an expected call of List.
func (mr *MockRepoMockRecorder[E]) List(ctx, ancestor, limit, cursor any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockRepo[E])(nil).List), ctx, ancestor, limit, cursor)
}

// ListAll mocks base method.
func (m *MockRepo[E]) ListAll(ctx context.Context, ancestor *datastore.Key) ([]*E, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAll", ctx, ancestor)
	ret0, _ := ret[0].([]*E)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAll indicates an expected call of ListAll.
func (mr *MockRepoMockRecorder[E]) ListAll(ctx, ancestor any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAll", reflect.TypeOf((*MockRepo[E])(nil).ListAll), ctx, ancestor)
}

// ListAllKeys mocks base method.
func (m *MockRepo[E]) ListAllKeys(ctx context.Context, ancestor *datastore.Key) ([]*datastore.Key, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAllKeys", ctx, ancestor)
	ret0, _ := ret[0].([]*datastore.Key)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAllKeys indicates an expected call of ListAllKeys.
func (mr *MockRepoMockRecorder[E]) ListAllKeys(ctx, ancestor any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAllKeys", reflect.TypeOf((*MockRepo[E])(nil).ListAllKeys), ctx, ancestor)
}

// ListAllKeysTxn mocks base method.
func (m *MockRepo[E]) ListAllKeysTxn(ctx context.Context, txn query.Transaction, ancestor *datastore.Key) ([]*datastore.Key, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAllKeysTxn", ctx, txn, ancestor)
	ret0, _ := ret[0].([]*datastore.Key)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAllKeysTxn indicates an expected call of ListAllKeysTxn.
func (mr *MockRepoMockRecorder[E]) ListAllKeysTxn(ctx, txn, ancestor any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAllKeysTxn", reflect.TypeOf((*MockRepo[E])(nil).ListAllKeysTxn), ctx, txn, ancestor)
}

// ListAllProjection mocks base method.
func (m *MockRepo[E]) ListAllProjection(ctx context.Context, ancestor *datastore.Key, generate query.Generator[any], fields ...string) ([]*any, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, ancestor, generate}
	for _, a := range fields {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAllProjection", varargs...)
	ret0, _ := ret[0].([]*any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAllProjection indicates an expected call of ListAllProjection.
func (mr *MockRepoMockRecorder[E]) ListAllProjection(ctx, ancestor, generate any, fields ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, ancestor, generate}, fields...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAllProjection", reflect.TypeOf((*MockRepo[E])(nil).ListAllProjection), varargs...)
}

// ListAllProjectionTxn mocks base method.
func (m *MockRepo[E]) ListAllProjectionTxn(ctx context.Context, txn query.Transaction, ancestor *datastore.Key, generate query.Generator[any], fields ...string) ([]*any, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, txn, ancestor, generate}
	for _, a := range fields {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAllProjectionTxn", varargs...)
	ret0, _ := ret[0].([]*any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAllProjectionTxn indicates an expected call of ListAllProjectionTxn.
func (mr *MockRepoMockRecorder[E]) ListAllProjectionTxn(ctx, txn, ancestor, generate any, fields ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, txn, ancestor, generate}, fields...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAllProjectionTxn", reflect.TypeOf((*MockRepo[E])(nil).ListAllProjectionTxn), varargs...)
}

// ListAllTxn mocks base method.
func (m *MockRepo[E]) ListAllTxn(ctx context.Context, txn query.Transaction, ancestor *datastore.Key) ([]*E, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAllTxn", ctx, txn, ancestor)
	ret0, _ := ret[0].([]*E)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAllTxn indicates an expected call of ListAllTxn.
func (mr *MockRepoMockRecorder[E]) ListAllTxn(ctx, txn, ancestor any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAllTxn", reflect.TypeOf((*MockRepo[E])(nil).ListAllTxn), ctx, txn, ancestor)
}

// ListKeys mocks base method.
func (m *MockRepo[E]) ListKeys(ctx context.Context, ancestor *datastore.Key, limit int, cursor string) ([]*datastore.Key, *datastore.Cursor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListKeys", ctx, ancestor, limit, cursor)
	ret0, _ := ret[0].([]*datastore.Key)
	ret1, _ := ret[1].(*datastore.Cursor)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListKeys indicates an expected call of ListKeys.
func (mr *MockRepoMockRecorder[E]) ListKeys(ctx, ancestor, limit, cursor any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListKeys", reflect.TypeOf((*MockRepo[E])(nil).ListKeys), ctx, ancestor, limit, cursor)
}

// ListKeysTxn mocks base method.
func (m *MockRepo[E]) ListKeysTxn(ctx context.Context, txn query.Transaction, ancestor *datastore.Key, limit int, cursor string) ([]*datastore.Key, *datastore.Cursor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListKeysTxn", ctx, txn, ancestor, limit, cursor)
	ret0, _ := ret[0].([]*datastore.Key)
	ret1, _ := ret[1].(*datastore.Cursor)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListKeysTxn indicates an expected call of ListKeysTxn.
func (mr *MockRepoMockRecorder[E]) ListKeysTxn(ctx, txn, ancestor, limit, cursor any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListKeysTxn", reflect.TypeOf((*MockRepo[E])(nil).ListKeysTxn), ctx, txn, ancestor, limit, cursor)
}

// ListPage mocks base method.
func (m *MockRepo[E]) ListPage(ctx context.Context, ancestor *datastore.Key, limit, offset int) ([]*E, *datastore.Cursor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPage", ctx, ancestor, limit, offset)
	ret0, _ := ret[0].([]*E)
	ret1, _ := ret[1].(*datastore.Cursor)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListPage indicates an expected call of ListPage.
func (mr *MockRepoMockRecorder[E]) ListPage(ctx, ancestor, limit, offset any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPage", reflect.TypeOf((*MockRepo[E])(nil).ListPage), ctx, ancestor, limit, offset)
}

// ListPageProjection mocks base method.
func (m *MockRepo[E]) ListPageProjection(ctx context.Context, ancestor *datastore.Key, limit, offset int, generate query.Generator[any], fields ...string) ([]*any, *datastore.Cursor, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, ancestor, limit, offset, generate}
	for _, a := range fields {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListPageProjection", varargs...)
	ret0, _ := ret[0].([]*any)
	ret1, _ := ret[1].(*datastore.Cursor)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListPageProjection indicates an expected call of ListPageProjection.
func (mr *MockRepoMockRecorder[E]) ListPageProjection(ctx, ancestor, limit, offset, generate any, fields ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, ancestor, limit, offset, generate}, fields...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPageProjection", reflect.TypeOf((*MockRepo[E])(nil).ListPageProjection), varargs...)
}

// ListPageProjectionTxn mocks base method.
func (m *MockRepo[E]) ListPageProjectionTxn(ctx context.Context, txn query.Transaction, ancestor *datastore.Key, limit, offset int, generate query.Generator[any], fields ...string) ([]*any, *datastore.Cursor, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, txn, ancestor, limit, offset, generate}
	for _, a := range fields {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListPageProjectionTxn", varargs...)
	ret0, _ := ret[0].([]*any)
	ret1, _ := ret[1].(*datastore.Cursor)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListPageProjectionTxn indicates an expected call of ListPageProjectionTxn.
func (mr *MockRepoMockRecorder[E]) ListPageProjectionTxn(ctx, txn, ancestor, limit, offset, generate any, fields ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, txn, ancestor, limit, offset, generate}, fields...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPageProjectionTxn", reflect.TypeOf((*MockRepo[E])(nil).ListPageProjectionTxn), varargs...)
}

// ListPageTxn mocks base method.
func (m *MockRepo[E]) ListPageTxn(ctx context.Context, txn query.Transaction, ancestor *datastore.Key, limit, offset int) ([]*E, *datastore.Cursor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPageTxn", ctx, txn, ancestor, limit, offset)
	ret0, _ := ret[0].([]*E)
	ret1, _ := ret[1].(*datastore.Cursor)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListPageTxn indicates an expected call of ListPageTxn.
func (mr *MockRepoMockRecorder[E]) ListPageTxn(ctx, txn, ancestor, limit, offset any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPageTxn", reflect.TypeOf((*MockRepo[E])(nil).ListPageTxn), ctx, txn, ancestor, limit, offset)
}

// ListProjection mocks base method.
func (m *MockRepo[E]) ListProjection(ctx context.Context, ancestor *datastore.Key, limit int, cursor string, generate query.Generator[any], fields ...string) ([]*any, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, ancestor, limit, cursor, generate}
	for _, a := range fields {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListProjection", varargs...)
	ret0, _ := ret[0].([]*any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListProjection indicates an expected call of ListProjection.
func (mr *MockRepoMockRecorder[E]) ListProjection(ctx, ancestor, limit, cursor, generate any, fields ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, ancestor, limit, cursor, generate}, fields...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProjection", reflect.TypeOf((*MockRepo[E])(nil).ListProjection), varargs...)
}

// ListProjectionTxn mocks base method.
func (m *MockRepo[E]) ListProjectionTxn(ctx context.Context, txn query.Transaction, ancestor *datastore.Key, generate query.Generator[any], fields ...string) ([]*any, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, txn, ancestor, generate}
	for _, a := range fields {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListProjectionTxn", varargs...)
	ret0, _ := ret[0].([]*any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListProjectionTxn indicates an expected call of ListProjectionTxn.
func (mr *MockRepoMockRecorder[E]) ListProjectionTxn(ctx, txn, ancestor, generate any, fields ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, txn, ancestor, generate}, fields...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProjectionTxn", reflect.TypeOf((*MockRepo[E])(nil).ListProjectionTxn), varargs...)
}

// ListTxn mocks base method.
func (m *MockRepo[E]) ListTxn(ctx context.Context, txn query.Transaction, ancestor *datastore.Key, limit int, cursor string) ([]*E, *datastore.Cursor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTxn", ctx, txn, ancestor, limit, cursor)
	ret0, _ := ret[0].([]*E)
	ret1, _ := ret[1].(*datastore.Cursor)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListTxn indicates an expected call of ListTxn.
func (mr *MockRepoMockRecorder[E]) ListTxn(ctx, txn, ancestor, limit, cursor any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTxn", reflect.TypeOf((*MockRepo[E])(nil).ListTxn), ctx, txn, ancestor, limit, cursor)
}

// Read mocks base method.
func (m *MockRepo[E]) Read(ctx context.Context, key *datastore.Key) (*E, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", ctx, key)
	ret0, _ := ret[0].(*E)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockRepoMockRecorder[E]) Read(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockRepo[E])(nil).Read), ctx, key)
}

// ReadMulti mocks base method.
func (m *MockRepo[E]) ReadMulti(ctx context.Context, keys []*datastore.Key) ([]*E, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadMulti", ctx, keys)
	ret0, _ := ret[0].([]*E)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadMulti indicates an expected call of ReadMulti.
func (mr *MockRepoMockRecorder[E]) ReadMulti(ctx, keys any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadMulti", reflect.TypeOf((*MockRepo[E])(nil).ReadMulti), ctx, keys)
}

// ReadMultiTxn mocks base method.
func (m *MockRepo[E]) ReadMultiTxn(txn query.Transaction, keys []*datastore.Key) ([]*E, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadMultiTxn", txn, keys)
	ret0, _ := ret[0].([]*E)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadMultiTxn indicates an expected call of ReadMultiTxn.
func (mr *MockRepoMockRecorder[E]) ReadMultiTxn(txn, keys any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadMultiTxn", reflect.TypeOf((*MockRepo[E])(nil).ReadMultiTxn), txn, keys)
}

// ReadTxn mocks base method.
func (m *MockRepo[E]) ReadTxn(txn query.Transaction, key *datastore.Key) (*E, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadTxn", txn, key)
	ret0, _ := ret[0].(*E)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadTxn indicates an expected call of ReadTxn.
func (mr *MockRepoMockRecorder[E]) ReadTxn(txn, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadTxn", reflect.TypeOf((*MockRepo[E])(nil).ReadTxn), txn, key)
}

// Update mocks base method.
func (m *MockRepo[E]) Update(ctx context.Context, key *datastore.Key, entity *E) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, key, entity)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockRepoMockRecorder[E]) Update(ctx, key, entity any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockRepo[E])(nil).Update), ctx, key, entity)
}

// UpdateMulti mocks base method.
func (m *MockRepo[E]) UpdateMulti(ctx context.Context, keys []*datastore.Key, entities []*E) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMulti", ctx, keys, entities)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateMulti indicates an expected call of UpdateMulti.
func (mr *MockRepoMockRecorder[E]) UpdateMulti(ctx, keys, entities any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMulti", reflect.TypeOf((*MockRepo[E])(nil).UpdateMulti), ctx, keys, entities)
}

// UpdateMultiTxn mocks base method.
func (m *MockRepo[E]) UpdateMultiTxn(txn query.Transaction, keys []*datastore.Key, entities []*E) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMultiTxn", txn, keys, entities)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateMultiTxn indicates an expected call of UpdateMultiTxn.
func (mr *MockRepoMockRecorder[E]) UpdateMultiTxn(txn, keys, entities any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMultiTxn", reflect.TypeOf((*MockRepo[E])(nil).UpdateMultiTxn), txn, keys, entities)
}

// UpdateTxn mocks base method.
func (m *MockRepo[E]) UpdateTxn(txn query.Transaction, key *datastore.Key, entity *E) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTxn", txn, key, entity)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTxn indicates an expected call of UpdateTxn.
func (mr *MockRepoMockRecorder[E]) UpdateTxn(txn, key, entity any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTxn", reflect.TypeOf((*MockRepo[E])(nil).UpdateTxn), txn, key, entity)
}
