// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/huysamen/dskit (interfaces: Client)
//
// Generated by this command:
//
//	mockgen -destination mock/client.go -package mock github.com/huysamen/dskit Client
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	datastore "cloud.google.com/go/datastore"
	dskit "github.com/huysamen/dskit"
	gomock "go.uber.org/mock/gomock"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
	isgomock struct{}
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// Client mocks base method.
func (m *MockClient) Client() *datastore.Client {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Client")
	ret0, _ := ret[0].(*datastore.Client)
	return ret0
}

// Client indicates an expected call of Client.
func (mr *MockClientMockRecorder) Client() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Client", reflect.TypeOf((*MockClient)(nil).Client))
}

// RunInTransaction mocks base method.
func (m *MockClient) RunInTransaction(ctx context.Context, f func(dskit.Transaction) error, opts ...datastore.TransactionOption) (*datastore.Commit, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, f}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RunInTransaction", varargs...)
	ret0, _ := ret[0].(*datastore.Commit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RunInTransaction indicates an expected call of RunInTransaction.
func (mr *MockClientMockRecorder) RunInTransaction(ctx, f any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, f}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunInTransaction", reflect.TypeOf((*MockClient)(nil).RunInTransaction), varargs...)
}
